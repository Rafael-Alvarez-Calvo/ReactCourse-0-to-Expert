{"version":3,"sources":["AddCategory/AddCategory.js","Helpers/GetGifs.js","GifGridItem/GifGridItem.js","GifGrid/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","placeholder","onChange","target","GetGifs","category","a","fetch","encodeURI","res","json","data","gifs","map","d","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","State","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"oQAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAqB5C,OACI,sBAAMC,SAZW,SAAAC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,iBAAM,CAACE,EAAWK,WAEhCJ,EAAc,MAKlB,SACI,uBACIM,KAAK,OACLC,MAAOR,EACPS,YAAY,gBACZC,SAtBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOH,a,8BCTlBI,EAAO,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,sEAEDC,MAAM,0CAAD,OAA2CC,UAAUH,GAArD,uDAFJ,cAEbI,EAFa,gBAGEA,EAAIC,OAHN,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAK,IAAD,EACtB,MAAO,CACHC,GAAKD,EAAEC,GACPC,MAAQF,EAAEE,MACVC,IAAG,UAAGH,EAAEI,cAAL,aAAG,EAAUC,iBAAiBF,QARtB,kBAaXL,GAbW,2CAAH,sDCEPQ,G,MAAc,SAAC,GAAkB,IAAjBJ,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEhC,OACI,mCACI,sBAAKI,UAAU,mDAAf,UACI,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,WCDPQ,G,MAAU,SAAC,GAAgB,IAAD,ECJX,SAACnB,GAAc,IAAD,EAEZd,mBAAS,CAC/BoB,KAAO,GACPc,SAAU,IAJwB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsBtC,OAfAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFC,YAAW,WAEPJ,EAAS,CACLhB,KAAMmB,EACNL,SAAU,MAGf,UAEZ,CAACpB,IAGGqB,EDhBiBM,CAFW,EAAd3B,UAEdM,EAF4B,EAE5BA,KAAMc,EAFsB,EAEtBA,QAiCb,OACI,qCAGKA,GAAW,mBAAGJ,UAAU,2CAAb,wBAIRV,EAAKE,KAAI,SAAAC,GAAC,OACN,cAAC,EAAD,eAESA,GADCA,EAAEC,YEZjBkB,G,MAnCM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,SAFvB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KASvB,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,qBAAK+B,UAAU,yDAAf,SAAwE,6BAAKa,MAC7E,oBAAIb,UAAU,YAAd,SACKa,EAAWrB,KAAI,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,aCnBvB8B,EAAUC,SAASC,cAAc,SAEvCC,IAASC,OACP,mCACE,cAAC,EAAD,MAEFJ,K","file":"static/js/main.12f83d75.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [InputValue, setInputValue] = useState(\"\")\r\n    //Sino introducimos en useState un valor por defecto y lo dejamos vacio, saldra un error ya que el valor que estamos dejando por defecto es undefined y eso muestra error de input incontrolable\r\n\r\n    const handleInputChange = (e) =>{\r\n        // console.log(e.target.value)\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n\r\n        if(InputValue.trim().length > 2){\r\n\r\n            setCategories(() => [InputValue.trim()]);\r\n            // setCategories(cats => [InputValue, ...cats]);\r\n            setInputValue(\"\");\r\n\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={InputValue}\r\n                placeholder=\"Buscar Gif...\"\r\n                onChange={handleInputChange}\r\n                />\r\n            {/* <h1 className=\"valueInput\">{InputValue}</h1> */}\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","\r\nexport const GetGifs = async(category) =>{\r\n\r\n    const res = await fetch(`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=52&api_key=SDjhfqG4VxMTu2BKkv1ksriZ5APoyWMS`)\r\n    const {data} = await res.json()\r\n    const gifs = data.map(d =>{\r\n        return {\r\n            id : d.id,\r\n            title : d.title,\r\n            url : d.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    // console.log(gifs)\r\n    return (gifs);\r\n        // console.log(data);\r\n    \r\n\r\n}","import React from 'react'\r\nimport '../GifGridItem/GifGridItem.css'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"ImgContainer animate__animated animate__fadeInUp\">\r\n                <img src={url} alt={title} />\r\n                <p>{title}</p>  \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../Hooks/useFetchGifs'\r\nimport { GifGridItem } from '../GifGridItem/GifGridItem';\r\nimport '../GifGrid/GifGrid.css'\r\n\r\n// import React, { useState, useEffect } from 'react'\r\n// import {GetGifs} from '../GetGifs/GetGifs'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data, loading} = useFetchGifs(category);\r\n\r\n\r\n    // const [Counter, setCounter] = useState(0);\r\n\r\n    // const [Images, setImages] = useState([])\r\n    // useEffect(() =>{ \r\n    //     GetGifs(category)\r\n    //         .then(setImages)\r\n    // }, [category]) //El array de dependencias vacio, hace que solo se pueda ejecutar una vez esa funcion, con category en la dependencia hacemos que ese codigoo se ejecute siempre que la caegory cambie\r\n\r\n    // const getGifs = async() =>{\r\n\r\n    //     await fetch(`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=52&api_key=SDjhfqG4VxMTu2BKkv1ksriZ5APoyWMS`)\r\n    //     .then(res => res.json())\r\n    //     .then(({data}) => {\r\n    //         // console.log(data);\r\n    //         const gifs = data.map(d =>{\r\n    //             return {\r\n    //                 id : d.id,\r\n    //                 title : d.title,\r\n    //                 url : d.images?.downsized_medium.url\r\n    //             }\r\n    //         })\r\n\r\n    //         // console.log(gifs)\r\n    //         setImages(gifs);\r\n    //     })\r\n\r\n    // }\r\n\r\n    //Se puede hacer el fetch aqui tambien pero se hace como helper\r\n\r\n    return (\r\n        <>\r\n            {/* <h2>{category}</h2> */}\r\n\r\n            {loading && <p className=\"loading animate__animated animate__flash\">Loading...</p>}\r\n            {/* {loading ? 'Cargando...' : 'Gifs cargados'} */}\r\n\r\n            {\r\n                data.map(d =>\r\n                    <GifGridItem \r\n                        key= {d.id}\r\n                        { ...d } /> /*mandamos todos los elementos*/\r\n                    )\r\n            }\r\n\r\n            {/* {Images.map(({id, title}) =>{\r\n                return <li id={id} key={id}> {title} </li>\r\n                })\r\n            } */}\r\n            \r\n            {/* <h3>{Counter}</h3>\r\n            <button onClick={() => setCounter(Counter + 1)}></button> */}\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect} from \"react\"\r\nimport { GetGifs } from \"../Helpers/GetGifs\"\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [State, setState] = useState({\r\n        data : [],\r\n        loading : true\r\n    })\r\n\r\n    useEffect(() =>{ \r\n        GetGifs(category)\r\n            .then(imgs =>{\r\n                setTimeout(() => {\r\n                    // console.log(imgs)\r\n                    setState({\r\n                        data :imgs,\r\n                        loading : false\r\n                    })\r\n        \r\n                }, 750);\r\n            })\r\n    }, [category])\r\n\r\n    \r\n    return State;\r\n}\r\n","import React, { useState } from 'react'\r\nimport {AddCategory} from './AddCategory/AddCategory'\r\nimport { GifGrid } from './GifGrid/GifGrid';\r\nimport './GifExpertApp.css'\r\n// import PropTypes from 'prop-types'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Hola']);\r\n\r\n    // const handleAdd = () =>{\r\n    //     // setCategories([add,...categories]) //Lo a単ade por delante\r\n    //     setCategories([...categories, add]) //Lo a単ade por detras\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n            <div className=\"containerTitleSearch animate__animated animate__fadeIn\"><h3>{categories}</h3></div>\r\n            <ol className=\"Container\">\r\n                {categories.map(category =>\r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category} />\r\n                )}\r\n                {/*el key es equivalente al id y react lo trata como error sino se pone pero no a単ade id al html*/}\r\n\r\n                {/* {categories.map(category =>{\r\n                    return <li id={category} key={category}> {category} </li>\r\n                })}el key es equivalente al id y react lo trata como error sino se pone pero no a単ade id al html */}\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\n// GifExpertApp.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nconst divRoot = document.querySelector(\"#root\");\n\nReactDOM.render(\n  <>\n    <GifExpertApp />\n  </>,\n  divRoot\n  \n);\n"],"sourceRoot":""}